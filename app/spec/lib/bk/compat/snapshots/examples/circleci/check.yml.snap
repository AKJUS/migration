---
steps:
- commands:
  - "# No need for checkout, the agent takes care of that"
  - echo '~~~ Install Dependencies'
  - apt-get update
  - apt-get install -y curl jq git
  - echo "~~~ Checking Docker Login"
  - echo "DOCKER_PASSWORD" | docker login -u "DOCKER_LOGIN" --password-stdin "docker.io"
  plugins:
  - docker#v5.10.0:
      image: cimg/base:stable
  agents:
    executor_type: docker
  key: check
- commands:
  - "# No need for checkout, the agent takes care of that"
  - echo '~~~ Install Dependencies'
  - apt-get update
  - apt-get install -y curl jq git
  - "# Instead of installing docker credential helper in a step, "
  - "# we recommend your agent environment to have it pre-installed"
  - echo '~~~ Installing Docker Credential Helper'
  - platform=""
  - arch="amd64"
  - helper_name=""
  - release_tag=""
  - if [ "$(uname -s)" = "Darwin" ]; then
  - '  platform="darwin"'
  - '  arch="arm64"'
  - else
  - '  platform="linux"'
  - fi
  - if [ -z "${helper_name}" ]; then
  - '  if [ "${platform}" = "darwin" ]; then'
  - '    helper_name="osxkeychain"'
  - "  else"
  - '    helper_name="pass"'
  - "  fi"
  - fi
  - helper_filename="docker-credential-${helper_name}"
  - BIN_PATH="/usr/local/bin"
  - '  RELEASE_TAG=$(curl -Ls --fail --retry 3 -o /dev/null -w "%<url_effective>s"
    https://github.com/docker/docker-credential-helpers/releases/latest | sed "s:.*/::")'
  - if [ -n "${release_tag}" ]; then
  - '  RELEASE_TAG="${release_tag}"'
  - fi
  - minor_version=$(echo "${RELEASE_TAG}" | cut -d. -f2)
  - base_url="https://github.com/docker/docker-credential-helpers/releases/download/"
  - download_base_url="${base_url}${RELEASE_TAG}/${helper_filename}-${RELEASE_TAG}"
  - if [ "${minor_version}" -gt 6 ]; then
  - '  DOWNLOAD_URL="${download_base_url}.${platform}-${arch}"'
  - else
  - '  DOWNLOAD_URL="${download_base_url}-${arch}.tar.gz"'
  - fi
  - 'echo "Downloading from URL: ${DOWNLOAD_URL}"'
  - curl -L -o "${helper_filename}_archive" "${DOWNLOAD_URL}"
  - if [ "${minor_version}" -le 6 ]; then
  - '  tar xvf "${helper_filename}_archive"'
  - '  rm "${helper_filename}_archive"'
  - else
  - '  mv "${helper_filename}_archive" "${helper_filename}"'
  - fi
  - chmod +x "${helper_filename}"
  - mv "${helper_filename}" "${BIN_PATH}/${helper_filename}"
  - echo '~~~ Configuring Docker Credentials Store'
  - DOCKER_CONFIG_PATH="$HOME/.docker/config.json"
  - HELPER_NAME=""
  - if [ -z "$HELPER_NAME" ]; then
  - '  if [ "$(uname -s)" = "Darwin" ]; then'
  - '    HELPER_NAME="osxkeychain"'
  - "  else"
  - '    HELPER_NAME="pass"'
  - "  fi"
  - fi
  - if [ ! -e "$DOCKER_CONFIG_PATH" ]; then
  - '  mkdir -p "$(dirname "$DOCKER_CONFIG_PATH")"'
  - fi
  - if ! command -v jq >/dev/null 2>&1; then
  - '  echo "jq is required for this command"'
  - "  exit 1"
  - fi
  - 'jq --arg credsStore "$HELPER_NAME" ''. + {credsStore: $credsStore}'' "$DOCKER_CONFIG_PATH"
    > /tmp/docker-config-credsstore-update.json'
  - mv /tmp/docker-config-credsstore-update.json "$DOCKER_CONFIG_PATH"
  - echo "~~~ Checking Docker Login"
  - echo "custom-password" | docker login -u "custom-username" --password-stdin "custom-registry.io"
  plugins:
  - docker#v5.10.0:
      image: cimg/base:stable
  agents:
    executor_type: docker
  key: check-custom
- commands:
  - "# No need for checkout, the agent takes care of that"
  - echo '~~~ Install Dependencies'
  - apt-get update
  - apt-get install -y curl jq git
  - "# Instead of installing docker credential helper in a step, "
  - "# we recommend your agent environment to have it pre-installed"
  - echo '~~~ Installing Docker Credential Helper'
  - platform=""
  - arch="arm64"
  - helper_name=""
  - release_tag=""
  - if [ "$(uname -s)" = "Darwin" ]; then
  - '  platform="darwin"'
  - '  arch="arm64"'
  - else
  - '  platform="linux"'
  - fi
  - if [ -z "${helper_name}" ]; then
  - '  if [ "${platform}" = "darwin" ]; then'
  - '    helper_name="osxkeychain"'
  - "  else"
  - '    helper_name="pass"'
  - "  fi"
  - fi
  - helper_filename="docker-credential-${helper_name}"
  - BIN_PATH="/usr/local/bin"
  - '  RELEASE_TAG=$(curl -Ls --fail --retry 3 -o /dev/null -w "%<url_effective>s"
    https://github.com/docker/docker-credential-helpers/releases/latest | sed "s:.*/::")'
  - if [ -n "${release_tag}" ]; then
  - '  RELEASE_TAG="${release_tag}"'
  - fi
  - minor_version=$(echo "${RELEASE_TAG}" | cut -d. -f2)
  - base_url="https://github.com/docker/docker-credential-helpers/releases/download/"
  - download_base_url="${base_url}${RELEASE_TAG}/${helper_filename}-${RELEASE_TAG}"
  - if [ "${minor_version}" -gt 6 ]; then
  - '  DOWNLOAD_URL="${download_base_url}.${platform}-${arch}"'
  - else
  - '  DOWNLOAD_URL="${download_base_url}-${arch}.tar.gz"'
  - fi
  - 'echo "Downloading from URL: ${DOWNLOAD_URL}"'
  - curl -L -o "${helper_filename}_archive" "${DOWNLOAD_URL}"
  - if [ "${minor_version}" -le 6 ]; then
  - '  tar xvf "${helper_filename}_archive"'
  - '  rm "${helper_filename}_archive"'
  - else
  - '  mv "${helper_filename}_archive" "${helper_filename}"'
  - fi
  - chmod +x "${helper_filename}"
  - mv "${helper_filename}" "${BIN_PATH}/${helper_filename}"
  - echo '~~~ Configuring Docker Credentials Store'
  - DOCKER_CONFIG_PATH="$HOME/.docker/config.json"
  - HELPER_NAME=""
  - if [ -z "$HELPER_NAME" ]; then
  - '  if [ "$(uname -s)" = "Darwin" ]; then'
  - '    HELPER_NAME="osxkeychain"'
  - "  else"
  - '    HELPER_NAME="pass"'
  - "  fi"
  - fi
  - if [ ! -e "$DOCKER_CONFIG_PATH" ]; then
  - '  mkdir -p "$(dirname "$DOCKER_CONFIG_PATH")"'
  - fi
  - if ! command -v jq >/dev/null 2>&1; then
  - '  echo "jq is required for this command"'
  - "  exit 1"
  - fi
  - 'jq --arg credsStore "$HELPER_NAME" ''. + {credsStore: $credsStore}'' "$DOCKER_CONFIG_PATH"
    > /tmp/docker-config-credsstore-update.json'
  - mv /tmp/docker-config-credsstore-update.json "$DOCKER_CONFIG_PATH"
  - echo "~~~ Checking Docker Login"
  - echo "DOCKER_PASSWORD" | docker login -u "DOCKER_LOGIN" --password-stdin "gcr.io"
  plugins:
  - docker#v5.10.0:
      image: cimg/base:stable
  agents:
    executor_type: docker
  key: check-custom-arch
- commands:
  - "# No need for checkout, the agent takes care of that"
  - echo '~~~ Install Dependencies'
  - apt-get update
  - apt-get install -y curl jq git
  - echo "~~~ Checking Docker Login"
  - echo "DOCKER_PASSWORD" | docker login -u "DOCKER_LOGIN" --password-stdin "registry1.example.com"
  - echo "~~~ Checking Docker Login"
  - echo "REGISTRY2_PASSWORD" | docker login -u "REGISTRY2_USERNAME" --password-stdin
    "registry2.example.com"
  plugins:
  - docker#v5.10.0:
      image: cimg/base:stable
  agents:
    executor_type: docker
  key: check-multiple-registries
